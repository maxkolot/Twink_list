–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞:

–ü–∞–ø–∫–∞: project

–ü–∞–ø–∫–∞: project\bot

–ü–∞–ø–∫–∞: project\bot\data

–ü–∞–ø–∫–∞: project\bot\handlers

–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: constants.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\data\constants.py



–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: __init__.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\data\__init__.py



–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: messages.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\data\messages.py

# messages.py

# –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –±–æ—Ç–∞
MESSAGES = {
    "start": {
        "ru": """
–ü—Ä–∏–≤–µ—Ç! üëã –ú–µ–Ω—è –∑–æ–≤—É—Ç –¢–≤–∏—Å—Ç, —è —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—å –ª–∏—Å—Ç–∞ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è.

–¢—ã –º–æ–∂–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —Å–≤–æ–π –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è –∏ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –Ω–∞—à–µ–π –æ–≥—Ä–æ–º–Ω–æ–π –∞—É–¥–∏—Ç–æ—Ä–∏–∏! üî•

–¢–∞–∫–∂–µ —É –Ω–∞—Å –µ—Å—Ç—å –ø–ª–∞—Ç–Ω—ã–π —Ç–∞—Ä–∏—Ñ –±–µ–∑ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ —Ç–≤–æ–µ–º –∫–∞–Ω–∞–ª–µ. –ï—Å–ª–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, —Ä–∞—Å—Å–∫–∞–∂—É –ø–æ–¥—Ä–æ–±–Ω–µ–µ! üí¨

<a href="https://t.me/GPORNLIST/2">–ü–†–û–ß–ò–¢–ê–ô–¢–ï –ü–†–ê–í–ò–õ–ê</a>""",
        "en": """
Hi! üëã My name is Twist, and I'm the manager of the promotion list.

You can add your channel or group for promotion and gain access to our massive audience! üî•

We also offer a paid plan that doesn't require posting in your channel. If you're interested, I can tell you more! üí¨

<a href="https://t.me/GPORNLIST/2">READ THE RULES</a>"""
    },
    "choose_language": {
        "ru": "–í–´–ë–ï–†–ò –°–í–û–ô –Ø–ó–´–ö\nCHOOSE YOUR LANGUAGE",
        "en": "CHOOSE YOUR LANGUAGE\n–í–´–ë–ï–†–ò –°–í–û–ô –Ø–ó–´–ö"
    },
    "change_language": {
        "ru": "–Ø–∑—ã–∫ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ —Ä—É—Å—Å–∫–∏–π üá∑üá∫",
        "en": "Language switched to English üá¨üáß"
    },
    "showme": {
        "ru": "–í–æ—Ç –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç: üìã\n\n–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–µ–∫—É—â–µ–º –ª–∏—Å—Ç–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏—è.",
        "en": "Here is the current list: üìã\n\nThis is where information about the current promotion list will be."
    },
    "audlist": {
        "ru": "–û–±—â–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è —Å–ø–∏—Å–∫–∞: {total} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤",
        "en": "Total audience of the list: {total} subscribers"
    },
    "audbot": {
        "ru": "–û–±—â–∞—è –∞—É–¥–∏—Ç–æ—Ä–∏—è –±–æ—Ç–∞: {total} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π",
        "en": "Total audience of the bot: {total} users"
    },
    "adsbot": {
        "ru": "–¢—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ –±–æ—Ç–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –ø–æ—Å—Ç (–º–µ–¥–∏–∞ + –æ–ø–∏—Å–∞–Ω–∏–µ). üì©",
        "en": "You can order advertising in the bot. Please send me your post (media + description). üì©"
    },
    "adslist": {
        "ru": "–¢—ã –º–æ–∂–µ—à—å –∑–∞–∫–∞–∑–∞—Ç—å —Ä–µ–∫–ª–∞–º—É –≤ —Å–ø–∏—Å–∫–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–∏—à–ª–∏ –º–Ω–µ —Å–≤–æ–π –ø–æ—Å—Ç (—Ñ–æ—Ç–æ + –æ–ø–∏—Å–∞–Ω–∏–µ). üì©",
        "en": "You can order advertising in the list. Please send me your post (photo + description). üì©"
    },
    "promo": {
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –ø—Ä–æ–º–æ –ø–æ—Å—Ç (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞). üì∑üé•",
        "en": "Please send the promo post (photo/video/media group). üì∑üé•"
    },
    "smm": {
        "ru": "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º. ‚úâÔ∏è",
        "en": "Please send the post for distribution to all subscribers. ‚úâÔ∏è"
    },
    "no_permission": {
        "ru": "–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã. üö´",
        "en": "You don't have permission to use this command. üö´"
    },
    "blocked_bot": {
        "ru": "–¢—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. üòî –ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—à—å, —è –≤—Å–µ–≥–¥–∞ –∑–¥–µ—Å—å!",
        "en": "You've blocked the bot. üòî If you change your mind, I'm always here!"
    },
    "unblocked_bot": {
        "ru": "–¢—ã —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –±–æ—Ç–∞. –†–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è —Å–Ω–æ–≤–∞! üòä",
        "en": "You've unblocked the bot. Happy to see you back! üòä"
    },
    "bot_added": {
        "ru": "–ë–æ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª –∏–ª–∏ –≥—Ä—É–ø–ø—É. üëç",
        "en": "Bot added to the channel or group. üëç"
    },
    "payment_request": {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã: üí≥ –∏–ª–∏ ‚≠ê",
        "en": "Choose a payment method: üí≥ or ‚≠ê"
    },
    "payment_confirm": {
        "ru": "–ü–ª–∞—Ç–µ–∂ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é —Å—Å—ã–ª–∫—É –∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞.",
        "en": "Payment confirmed. Please send your channel link and name."
    },
    "promo_fire_activated": {
        "ru": "üî• –ü—Ä–æ–º–æ-–æ–≥–æ–Ω—å –¥–æ–±–∞–≤–ª–µ–Ω –∫ —Ç–≤–æ–µ–º—É –∫–∞–Ω–∞–ª—É –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏!",
        "en": "üî• Promo fire added to your channel for 2 weeks!"
    }
}

# –ö–Ω–æ–ø–∫–∏ –¥–ª—è –±–æ—Ç–∞
BUTTONS = {
    "main_menu": {
        "ru": {
            "channel": "–ö–∞–Ω–∞–ª",
            "group": "–ì—Ä—É–ø–ø–∞",
            "vip_tariff": "üî•VIP –¢–ê–†–ò–§üî•",
            "add_channel": "‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–∞–ª",
            "statistics": "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
            "change_language": "–ü–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫"
        },
        "en": {
            "channel": "Channel",
            "group": "Group",
            "vip_tariff": "üî•VIP TARIFFüî•",
            "add_channel": "‚ûï Add channel",
            "statistics": "üìä Statistics",
            "change_language": "Change language"
        }
    },
    "language_selection": {
        "ru": {
            "rus": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
            "eng": "English üá¨üáß"
        },
        "en": {
            "rus": "–†—É—Å—Å–∫–∏–π üá∑üá∫",
            "eng": "English üá¨üáß"
        }
    },
    "payment_methods": {
        "ru": {
            "semi_auto": "üí≥ –ü–æ–ª—É–∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–µ—Ä–µ–≤–æ–¥",
            "telegram_stars": "‚≠ê –û–ø–ª–∞—Ç–∏—Ç—å –∑–≤–µ–∑–¥–∞–º–∏ Telegram"
        },
        "en": {
            "semi_auto": "üí≥ Semi-automatic transfer",
            "telegram_stars": "‚≠ê Pay with Telegram stars"
        }
    },
    "payment_confirmation": {
        "ru": {
            "spam": "–°–ø–∞–º ‚ùå",
            "confirm": "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å ‚úÖ"
        },
        "en": {
            "spam": "Spam ‚ùå",
            "confirm": "Confirm ‚úÖ"
        }
    },
    "vip_subscription": {
        "ru": {
            "pay": "–û–ø–ª–∞—Ç–∏—Ç—å VIP —Ç–∞—Ä–∏—Ñ",
            "back": "–ù–∞–∑–∞–¥"
        },
        "en": {
            "pay": "Pay VIP tariff",
            "back": "Back"
        }
    },
    "date_selection": {
        "ru": {
            "today": "–°–µ–≥–æ–¥–Ω—è",
            "tomorrow": "–ó–∞–≤—Ç—Ä–∞",
            "select_date": "–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É",
            "now": "–°–µ–π—á–∞—Å"
        },
        "en": {
            "today": "Today",
            "tomorrow": "Tomorrow",
            "select_date": "Select date",
            "now": "Now"
        }
    },
    "time_selection": {
        "ru": {
            "00_05": "00:05",
            "00_30": "00:30",
            "01_00": "01:00",
            "01_30": "01:30"
            # –∏ —Ç.–¥.
        },
        "en": {
            "00_05": "00:05",
            "00_30": "00:30",
            "01_00": "01:00",
            "01_30": "01:30"
            # –∏ —Ç.–¥.
        }
    },
    "back_button": {
        "ru": "‚¨ÖÔ∏è –ù–∞–∑–∞–¥",
        "en": "‚¨ÖÔ∏è Back"
    }
}


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: config.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\config.py

import os
from dotenv import load_dotenv

load_dotenv()

API_TOKEN = os.getenv('API_TOKEN')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
DB_USER = os.getenv('DB_USER')
DB_PASSWORD = os.getenv('DB_PASSWORD')
DB_HOST = os.getenv('DB_HOST', 'localhost')
DB_NAME = os.getenv('DB_NAME')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOGGING_LEVEL = os.getenv('LOGGING_LEVEL', 'INFO')

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –ø–ª–∞—Ç–µ–∂–µ–π
PAYMENT_PROVIDER_TOKEN = os.getenv('PAYMENT_PROVIDER_TOKEN')

# –°—Å—ã–ª–∫–∏ –¥–ª—è —Å–ø–∏—Å–∫–∞ (—Ä–∞–±–æ—Ç–∞ –∏ –¥—Ä.)
WORK_LINK = os.getenv('WORK_LINK')
PROMO_LINK = os.getenv('PROMO_LINK')
ADD_CHANNEL_LINK = os.getenv('ADD_CHANNEL_LINK')

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
ADMIN_ID = int(os.getenv('ADMIN_ID'))

# –î—Ä—É–≥–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
TIMEZONE = os.getenv('TIMEZONE', 'Europe/Moscow')

DB_CONFIG = {
    'connections': {
        'default': {
            'engine': 'tortoise.backends.asyncpg',
            'credentials': {
                'host': os.getenv('DB_HOST', 'localhost'),
                'port': '5432',
                'user': os.getenv('DB_USER'),
                'password': os.getenv('DB_PASSWORD'),
                'database': os.getenv('DB_NAME'),
            }
        }
    },
    'apps': {
        'models': {
            'models': [
                'models.user',
                'models.channel',
                'models.temporary_channel',
                'models.transaction',
                'models.advertisement',
                'models.scheduled_task',
                'models.promo',
                'models.referral',
                'models.channel_statistic',
                'models.user_statistic',
                'aerich.models'  # –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ Aerich –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–π
            ],
            'default_connection': 'default',
        }
    }
}



–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: admin.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\handlers\admin.py

# admin.py

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from models.promo import Promo
from utils.helpers import generate_promo_code
from config import ADMIN_ID

router = Router()

@router.message(Command("promo"))
async def promo_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–º–æ –ø–æ—Å—Ç (—Ñ–æ—Ç–æ/–≤–∏–¥–µ–æ/–º–µ–¥–∏–∞–≥—Ä—É–ø–ø–∞).")
    await PromoState.waiting_for_promo.set()

from aiogram.fsm.context import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup

class PromoState(StatesGroup):
    waiting_for_promo = State()

@router.message(PromoState.waiting_for_promo, content_types=types.ContentType.ANY)
async def receive_promo(message: Message, state: FSMContext):
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–æ –≤ –ë–î
    promo_code = generate_promo_code()
    promo = await Promo.create(
        media_id=message.photo[-1].file_id if message.photo else None,
        description=message.caption or message.text,
        code=promo_code
    )

    await message.answer(f"–ü—Ä–æ–º–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ —Å –∫–æ–¥–æ–º: {promo_code}")
    await state.finish()

@router.message(Command("smm"))
async def smm_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–æ—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
    await SMMState.waiting_for_post.set()

class SMMState(StatesGroup):
    waiting_for_post = State()

@router.message(SMMState.waiting_for_post, content_types=types.ContentType.ANY)
async def receive_smm_post(message: Message, state: FSMContext):
    # –õ–æ–≥–∏–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
    await message.answer("–ü–æ—Å—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º.")
    await state.finish()


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: channel.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\handlers\channel.py

# channel.py

from aiogram import Router, types
from aiogram.types import ChatMemberUpdated, Message
from aiogram.utils.exceptions import ChatAdminRequired

from models.user import User
from models.channel import Channel, TemporaryChannel
from utils.helpers import generate_password
from config import ADMIN_ID

router = Router()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª/–≥—Ä—É–ø–ø—É
@router.my_chat_member()
async def my_chat_member_handler(chat_member_update: ChatMemberUpdated):
    if chat_member_update.chat.type in ['supergroup', 'channel']:
        if chat_member_update.new_chat_member.status == 'administrator':
            channel_id = chat_member_update.chat.id
            user_id = chat_member_update.from_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
            bot_permissions = chat_member_update.new_chat_member
            required_permissions = ['can_post_messages', 'can_edit_messages', 'can_invite_users', 'can_manage_chat', 'can_pin_messages']
            for perm in required_permissions:
                if not getattr(bot_permissions, perm, False):
                    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω—ã—Ö –ø—Ä–∞–≤–∞—Ö
                    await chat_member_update.bot.send_message(
                        chat_id=user_id,
                        text="–£ –±–æ—Ç–∞ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å—Ç–µ –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞."
                    )
                    return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user = await User.get_or_none(user_id=user_id)
            if not user:
                user = await User.create(user_id=user_id, language='ru', status='active')

            # –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–≤—è–∑–∫—É –≤ –ë–î
            password = generate_password()
            temp_channel = await TemporaryChannel.create(
                channel_id=channel_id,
                password=password,
                user=user,
                expires_at=None  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            )

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
            instruction = f"–ß—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –≤ —Å–ø–∏—Å–æ–∫, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤ —Å–≤–æ–π –∫–∞–Ω–∞–ª —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n<code>/add {password}</code>"
            await chat_member_update.bot.send_message(chat_id=user_id, text=instruction)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /add –≤ –∫–∞–Ω–∞–ª–µ
@router.message(Command("add"))
async def add_channel_handler(message: Message):
    if message.chat.type in ['supergroup', 'channel']:
        args = message.get_args()
        if not args:
            return
        password = args.strip()

        # –ò—â–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é —Å–≤—è–∑–∫—É –ø–æ channel_id –∏ password
        temp_channel = await TemporaryChannel.get_or_none(
            channel_id=message.chat.id,
            password=password
        )
        if temp_channel:
            # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.delete()
            except ChatAdminRequired:
                pass  # –ë–æ—Ç –¥–æ–ª–∂–µ–Ω –∏–º–µ—Ç—å –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π

            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∑–∞–ø–∏—Å—å –∫–∞–Ω–∞–ª–∞ –≤ –ë–î
            channel, created = await Channel.get_or_create(
                channel_id=message.chat.id,
                defaults={
                    'name': message.chat.title,
                    'link': message.chat.username or '',
                    'user': temp_channel.user,
                    'status': 'free',
                    'date_expiration': None
                }
            )
            if not created:
                channel.status = 'free'
                channel.date_expiration = None
                await channel.save()

            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
            await temp_channel.delete()

            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ)

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.bot.send_message(
                chat_id=channel.user.user_id,
                text="–ö–∞–Ω–∞–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–ø–∏—Å–æ–∫!"
            )


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: ads.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\handlers\ads.py

# ads.py

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from models.user import User
from models.advertisement import Advertisement
from data.messages import MESSAGES
from config import ADMIN_ID
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

router = Router()

class AdvertisementState(StatesGroup):
    waiting_for_ad = State()
    waiting_for_buttons = State()
    waiting_for_confirmation = State()

@router.message(Command("adsbot"))
async def adsbot_handler(message: Message, state: FSMContext, user: User):
    lang = user.language
    await message.answer(MESSAGES["adsbot"][lang])
    await state.set_state(AdvertisementState.waiting_for_ad)
    await state.update_data(ad_type='ads_in_bot')

@router.message(Command("adslist"))
async def adslist_handler(message: Message, state: FSMContext, user: User):
    lang = user.language
    await message.answer(MESSAGES["adslist"][lang])
    await state.set_state(AdvertisementState.waiting_for_ad)
    await state.update_data(ad_type='ads_in_list')

@router.message(AdvertisementState.waiting_for_ad, content_types=types.ContentType.ANY)
async def receive_ad(message: Message, state: FSMContext, user: User):
    data = await state.get_data()
    ad_type = data.get('ad_type')

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–µ–¥–∏–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ
    media_id = None
    if message.content_type == 'photo':
        media_id = message.photo[-1].file_id
    elif message.content_type == 'video':
        media_id = message.video.file_id
    # –î–æ–±–∞–≤—å—Ç–µ –æ–±—Ä–∞–±–æ—Ç–∫—É –¥—Ä—É–≥–∏—Ö —Ç–∏–ø–æ–≤ –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏

    ad = await Advertisement.create(
        user=user,
        ad_type=ad_type,
        description=message.caption or message.text,
        media_id=media_id,
        status='pending'
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∞–¥–º–∏–Ω—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É
    admin_message = f"–ù–æ–≤–∞—è —Ä–µ–∫–ª–∞–º–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}.\nID —Ä–µ–∫–ª–∞–º—ã: {ad.id}"
    await message.bot.send_message(chat_id=ADMIN_ID, text=admin_message)
    await message.copy_to(chat_id=ADMIN_ID)

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.")
    await state.clear()


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: events.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\handlers\events.py

# events.py

from aiogram import Router, types
from aiogram.types import ChatMemberUpdated
from models.user import User
from models.channel import Channel

router = Router()

@router.my_chat_member()
async def my_chat_member_handler(chat_member_update: ChatMemberUpdated):
    # –≠—Ç–æ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–∂–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω –≤ channel.py
    pass


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: referral.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\handlers\referral.py

# referral.py

from aiogram import Router, types
from aiogram.filters import Command
from models.user import User

router = Router()

@router.message(Command("referral"))
async def referral_handler(message: types.Message, user: User):
    referral_link = f"http://t.me/{message.bot.username}?start={user.user_id}"
    await message.answer(f"–í–∞—à–∞ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {referral_link}")


–ü–∞–ø–∫–∞: project\bot\keyboards

–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: channel_owner.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\handlers\channel_owner.py

# channel_owner.py

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from models.channel import Channel
from models.user import User
from utils.helpers import create_pdf_report

router = Router()

@router.message(Command("my_projects"))
async def my_projects_handler(message: Message, user: User):
    channels = await Channel.filter(user=user)
    if channels:
        keyboard = InlineKeyboardMarkup()
        for channel in channels:
            keyboard.add(
                InlineKeyboardButton(
                    text=channel.name,
                    callback_data=f"channel_{channel.id}"
                )
            )
        await message.answer("–í–∞—à–∏ –ø—Ä–æ–µ–∫—Ç—ã:", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤.")

@router.callback_query(lambda c: c.data.startswith("channel_"))
async def channel_options(callback_query: CallbackQuery):
    channel_id = int(callback_query.data.split("_")[1])
    channel = await Channel.get_or_none(id=channel_id)
    if channel:
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å üî• –∫ –Ω–∞–∑–≤–∞–Ω–∏—é", callback_data=f"add_fire_{channel_id}")
            ],
            [
                InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data=f"stats_{channel_id}")
            ]
        ])
        await callback_query.message.edit_text(f"–û–ø—Ü–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ {channel.name}:", reply_markup=keyboard)
        await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith("add_fire_"))
async def add_fire(callback_query: CallbackQuery, user: User):
    channel_id = int(callback_query.data.split("_")[2])
    channel = await Channel.get_or_none(id=channel_id)
    if channel:
        # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –¥–ª—è –æ–ø–ª–∞—Ç—ã
        # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –ª–æ–≥–∏–∫—É –æ–ø–ª–∞—Ç—ã
        channel.promo_fire = True
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è —á–µ—Ä–µ–∑ 2 –Ω–µ–¥–µ–ª–∏
        channel.promo_fire_expiration_date = datetime.now() + timedelta(weeks=2)
        await channel.save()
        await callback_query.message.answer("üî• –¥–æ–±–∞–≤–ª–µ–Ω –∫ –≤–∞—à–µ–º—É –∫–∞–Ω–∞–ª—É –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏!")
        await callback_query.answer()


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: start.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\handlers\start.py

# start.py

from aiogram import Router, types, Bot
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery

from data.messages import MESSAGES, BUTTONS
from models.user import User
from utils.commands import set_user_commands

router = Router()

@router.message(Command("start"))
async def start_handler(message: types.Message, lang: str = None, user: User = None):
    if not lang:
        # –ï—Å–ª–∏ —è–∑—ã–∫ –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —è–∑—ã–∫
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text=BUTTONS["language_selection"]["ru"]["rus"], callback_data="lang_ru"),
                InlineKeyboardButton(text=BUTTONS["language_selection"]["ru"]["eng"], callback_data="lang_en"),
            ]
        ])
        await message.answer(MESSAGES["choose_language"]["ru"], reply_markup=keyboard)
    else:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —è–∑—ã–∫–∞
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=BUTTONS["main_menu"][lang]["channel"],
                    url=f"http://t.me/{message.bot.username}?startchannel&admin=post_messages+edit_messages+invite_users+manage_chat+restrict_members"
                ),
                InlineKeyboardButton(
                    text=BUTTONS["main_menu"][lang]["group"],
                    url=f"http://t.me/{message.bot.username}?startgroup&admin=post_messages+edit_messages+invite_users+manage_chat+restrict_members"
                ),
            ],
            [InlineKeyboardButton(text=BUTTONS["main_menu"][lang]["vip_tariff"], callback_data="VIP")]
        ])
        await message.answer(MESSAGES["start"][lang], reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@router.callback_query(lambda c: c.data.startswith("lang_"))
async def change_language(callback_query: CallbackQuery, user: User):
    lang_code = callback_query.data.split("_")[1]
    if lang_code not in ['ru', 'en']:
        lang_code = 'ru'

    # –û–±–Ω–æ–≤–ª—è–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    user.language = lang_code
    await user.save()

    # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await set_user_commands(user_id=user.user_id, lang=lang_code)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    await start_handler(callback_query.message, lang=lang_code, user=user)
    await callback_query.answer()


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: statistics.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\handlers\statistics.py

# statistics.py

from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import Message
from data.messages import MESSAGES
from services.statistics import get_total_list_audience, get_total_bot_audience, generate_list_preview

router = Router()

@router.message(Command("audlist"))
async def audlist_handler(message: Message, user: User):
    lang = user.language
    total_audience = await get_total_list_audience()
    await message.answer(MESSAGES["audlist"][lang].format(total=total_audience))

@router.message(Command("audbot"))
async def audbot_handler(message: Message, user: User):
    lang = user.language
    total_users = await get_total_bot_audience()
    await message.answer(MESSAGES["audbot"][lang].format(total=total_users))

@router.message(Command("showme"))
async def showme_handler(message: Message, user: User):
    lang = user.language
    list_preview = await generate_list_preview(lang)
    await message.answer(list_preview)


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: __init__.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\handlers\__init__.py



–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: vip.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\handlers\vip.py

# vip.py

from aiogram import Router, types
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup, InlineKeyboardButton
from models.user import User
from models.transaction import Transaction
from config import ADMIN_ID
from data.messages import MESSAGES, BUTTONS
from utils.payment import process_payment

router = Router()

@router.callback_query(lambda c: c.data == "VIP")
async def vip_tariff_handler(callback_query: CallbackQuery, user: User):
    lang = user.language
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text=BUTTONS["payment_methods"][lang]["semi_auto"], callback_data="pay_semi_auto"),
            InlineKeyboardButton(text=BUTTONS["payment_methods"][lang]["telegram_stars"], callback_data="pay_telegram_stars")
        ],
        [
            InlineKeyboardButton(text=BUTTONS["back_button"][lang], callback_data="back_to_main")
        ]
    ])
    await callback_query.message.edit_text(MESSAGES["payment_request"][lang], reply_markup=keyboard)
    await callback_query.answer()

@router.callback_query(lambda c: c.data.startswith("pay_"))
async def process_vip_payment(callback_query: CallbackQuery, user: User):
    lang = user.language
    payment_method = callback_query.data.split("_")[1]

    # –°–æ–∑–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ –ë–î
    transaction = await Transaction.create(
        user=user,
        amount=800.00,  # –£–∫–∞–∂–∏—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç—å VIP —Ç–∞—Ä–∏—Ñ–∞
        payment_method=payment_method,
        status='pending',
        transaction_type='vip_subscription'
    )

    if payment_method == 'semi_auto':
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã
        payment_details = "–†–µ–∫–≤–∏–∑–∏—Ç—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã:\n–ö–∞—Ä—Ç–∞: 1234 5678 9012 3456\n–°—É–º–º–∞: 800‚ÇΩ"
        await callback_query.message.answer(payment_details)

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –æ –Ω–æ–≤–æ–º –ø–ª–∞—Ç–µ–∂–µ
        admin_text = f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É VIP —Ç–∞—Ä–∏—Ñ–∞ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user.user_id}.\n–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è ID: {transaction.id}"
        await callback_query.bot.send_message(chat_id=ADMIN_ID, text=admin_text)
    elif payment_method == 'telegram_stars':
        # –†–µ–∞–ª–∏–∑—É–π—Ç–µ –æ–ø–ª–∞—Ç—É —á–µ—Ä–µ–∑ –∑–≤–µ–∑–¥—ã Telegram, –µ—Å–ª–∏ –≤–æ–∑–º–æ–∂–Ω–æ
        pass

    await callback_query.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º
@router.message(commands=['confirm_payment'])
async def confirm_payment_handler(message: Message):
    if message.from_user.id != ADMIN_ID:
        return

    args = message.get_args()
    if not args:
        await message.answer("–£–∫–∞–∂–∏—Ç–µ ID —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return

    transaction_id = int(args.strip())
    transaction = await Transaction.get_or_none(id=transaction_id)
    if transaction and transaction.status == 'pending':
        transaction.status = 'confirmed'
        await transaction.save()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –∫–∞–Ω–∞–ª–∞
        user = transaction.user
        user.status = 'vip'
        await user.save()

        # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        await message.bot.send_message(
            chat_id=user.user_id,
            text=MESSAGES["payment_confirm"][user.language]
        )
    else:
        await message.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞.")


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: inline.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\keyboards\inline.py



–ü–∞–ø–∫–∞: project\bot\middlewares

–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: reply.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\keyboards\reply.py



–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: __init__.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\keyboards\__init__.py



–ü–∞–ø–∫–∞: project\bot\models

–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: main.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\main.py

# main.py

import asyncio
import logging

from aiogram import Bot, Dispatcher
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage  # –ü–æ–¥–∫–ª—é—á–∞–µ–º FSM
from tortoise import Tortoise
from utils.logging_config import setup_logging
from config import API_TOKEN, DB_CONFIG
from middlewares.user_middleware import UserMiddleware
from handlers import start, channel, vip, ads, admin, statistics, channel_owner, referral
from utils.scheduler import setup_scheduler

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(filename)s:%(lineno)d #%(levelname)-8s [%(asctime)s] - %(name)s - %(message)s",
)
logger = logging.getLogger(__name__)

async def main():
    logger.info("Starting bot")
    setup_logging()

    bot = Bot(token=API_TOKEN, parse_mode=ParseMode.HTML)
    dp = Dispatcher(storage=MemoryStorage())  # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º FSM storage

    # –ü–æ–¥–∫–ª—é—á–∞–µ–º middleware
    dp.message.middleware(UserMiddleware())
    dp.callback_query.middleware(UserMiddleware())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
    dp.include_router(start.router)
    dp.include_router(channel.router)
    dp.include_router(vip.router)
    dp.include_router(ads.router)
    dp.include_router(admin.router)
    dp.include_router(statistics.router)
    dp.include_router(channel_owner.router)
    dp.include_router(referral.router)

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    await Tortoise.init(config=DB_CONFIG)
    await Tortoise.generate_schemas()

    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    setup_scheduler()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–ª–ª–∏–Ω–≥
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("Bot stopped")


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: __init__.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\middlewares\__init__.py



–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: user_middleware.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\middlewares\user_middleware.py

# user_middleware.py

from typing import Any, Awaitable, Callable, Dict

from aiogram import types
from aiogram.dispatcher.middlewares.base import BaseMiddleware
from models.user import User

class UserMiddleware(BaseMiddleware):
    async def __call__(
        self,
        handler: Callable[[types.TelegramObject, Dict[str, Any]], Awaitable[Any]],
        event: types.TelegramObject,
        data: Dict[str, Any],
    ) -> Any:
        if isinstance(event, (types.Message, types.CallbackQuery)):
            user_id = event.from_user.id

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
            user = await User.get_or_none(user_id=user_id)
            if not user:
                # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, —Å–æ–∑–¥–∞–µ–º –µ–≥–æ —Å —è–∑—ã–∫–æ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é ('ru')
                user = await User.create(user_id=user_id, language='ru', status='active')

            # –ü–æ–ª—É—á–∞–µ–º —è–∑—ã–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            data['lang'] = user.language

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ data –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
            data['user'] = user

        return await handler(event, data)


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: channel.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\models\channel.py

from tortoise import fields, models


class Channel(models.Model):
    id = fields.IntField(pk=True)
    channel_id = fields.BigIntField(unique=True)  # Telegram ID –∫–∞–Ω–∞–ª–∞
    name = fields.CharField(max_length=255)
    link = fields.CharField(max_length=255)
    user = fields.ForeignKeyField('models.User', related_name='channels')
    date_added = fields.DatetimeField(auto_now_add=True)
    status = fields.CharField(max_length=20, default='free')  # 'free', 'vip', 'blocked'
    date_expiration = fields.DatetimeField(null=True)
    subscribers_count = fields.IntField(default=0)
    promo_fire = fields.BooleanField(default=False)
    promo_fire_expiration_date = fields.DatetimeField(null=True)

    class Meta:
        table = "channels"

    def __str__(self):
        return f"Channel(id={self.channel_id}, name={self.name})"


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: channel_statistic.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\models\channel_statistic.py

from tortoise import fields, models


class ChannelStatistic(models.Model):
    id = fields.IntField(pk=True)
    channel = fields.ForeignKeyField('models.Channel', related_name='statistics')
    date = fields.DateField()
    subscribers_count = fields.IntField()
    joins_from_bot = fields.IntField(default=0)
    joins_from_list = fields.IntField(default=0)

    class Meta:
        table = "channel_statistics"

    def __str__(self):
        return f"ChannelStatistic(channel_id={self.channel.channel_id}, date={self.date})"


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: advertisement.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\models\advertisement.py

from tortoise import fields, models
from tortoise.contrib.pydantic import pydantic_model_creator


class Advertisement(models.Model):
    id = fields.IntField(pk=True)
    user = fields.ForeignKeyField('models.User', related_name='advertisements')
    ad_type = fields.CharField(max_length=20)  # 'ads_in_bot', 'ads_in_list', 'ads_in_channels'
    media_id = fields.CharField(max_length=255, null=True)  # File ID –≤ Telegram
    description = fields.TextField()
    buttons = fields.JSONField(null=True)
    status = fields.CharField(max_length=20, default='pending')  # 'pending', 'approved', etc.
    price = fields.DecimalField(max_digits=10, decimal_places=2, null=True)
    scheduled_datetime = fields.DatetimeField(null=True)
    date_created = fields.DatetimeField(auto_now_add=True)
    date_updated = fields.DatetimeField(auto_now=True)

    class Meta:
        table = "advertisements"

    def __str__(self):
        return f"Advertisement(id={self.id}, ad_type={self.ad_type}, status={self.status})"


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: promo.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\models\promo.py

from tortoise import fields, models


class Promo(models.Model):
    id = fields.IntField(pk=True)
    media_id = fields.CharField(max_length=255, null=True)
    description = fields.TextField()
    buttons = fields.JSONField(null=True)
    code = fields.CharField(max_length=100, unique=True)
    date_created = fields.DatetimeField(auto_now_add=True)

    class Meta:
        table = "promos"

    def __str__(self):
        return f"Promo(id={self.id}, code={self.code})"


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: referral.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\models\referral.py

from tortoise import fields, models


class Referral(models.Model):
    id = fields.IntField(pk=True)
    user = fields.ForeignKeyField('models.User', related_name='referrals_made')
    referred_user = fields.ForeignKeyField('models.User', related_name='referred_by')
    date_referred = fields.DatetimeField(auto_now_add=True)
    commission_earned = fields.DecimalField(max_digits=10, decimal_places=2, default=0.00)

    class Meta:
        table = "referrals"

    def __str__(self):
        return f"Referral(user_id={self.user.user_id}, referred_user_id={self.referred_user.user_id})"


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: scheduled_task.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\models\scheduled_task.py

from tortoise import fields, models


class ScheduledTask(models.Model):
    id = fields.IntField(pk=True)
    task_type = fields.CharField(max_length=50)  # 'send_list', 'send_ad', 'notify_user', etc.
    scheduled_datetime = fields.DatetimeField()
    parameters = fields.JSONField()
    status = fields.CharField(max_length=20, default='pending')  # 'pending', 'completed', 'failed'
    date_created = fields.DatetimeField(auto_now_add=True)
    date_updated = fields.DatetimeField(auto_now=True)

    class Meta:
        table = "scheduled_tasks"

    def __str__(self):
        return f"ScheduledTask(id={self.id}, task_type={self.task_type}, status={self.status})"


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: temporary_channel.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\models\temporary_channel.py

from tortoise import fields, models


class TemporaryChannel(models.Model):
    id = fields.IntField(pk=True)
    channel_id = fields.BigIntField()
    password = fields.CharField(max_length=255)
    user = fields.ForeignKeyField('models.User', related_name='temporary_channels')
    date_created = fields.DatetimeField(auto_now_add=True)
    expires_at = fields.DatetimeField()

    class Meta:
        table = "temporary_channels"

    def __str__(self):
        return f"TemporaryChannel(channel_id={self.channel_id}, user_id={self.user.user_id})"


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: transaction.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\models\transaction.py

from tortoise import fields, models


class Transaction(models.Model):
    id = fields.IntField(pk=True)
    user = fields.ForeignKeyField('models.User', related_name='transactions')
    amount = fields.DecimalField(max_digits=10, decimal_places=2)
    payment_method = fields.CharField(max_length=20)  # 'semi-automatic', 'telegram_stars'
    status = fields.CharField(max_length=20, default='pending')  # 'pending', 'confirmed', 'failed'
    date_created = fields.DatetimeField(auto_now_add=True)
    date_confirmed = fields.DatetimeField(null=True)
    transaction_type = fields.CharField(max_length=50)  # 'vip_subscription', 'promo_fire', etc.
    details = fields.TextField(null=True)

    class Meta:
        table = "transactions"

    def __str__(self):
        return f"Transaction(id={self.id}, user_id={self.user.user_id}, amount={self.amount})"


–ü–∞–ø–∫–∞: project\bot\services

–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: user_statistic.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\models\user_statistic.py

from tortoise import fields, models


class UserStatistic(models.Model):
    id = fields.IntField(pk=True)
    user = fields.ForeignKeyField('models.User', related_name='statistics')
    date = fields.DateField()
    messages_sent = fields.IntField(default=0)
    ads_requested = fields.IntField(default=0)

    class Meta:
        table = "user_statistics"

    def __str__(self):
        return f"UserStatistic(user_id={self.user.user_id}, date={self.date})"


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: user.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\models\user.py

from tortoise import fields, models


class User(models.Model):
    id = fields.IntField(pk=True)
    user_id = fields.BigIntField(unique=True)  # Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    language = fields.CharField(max_length=2, default='ru')  # 'ru' –∏–ª–∏ 'en'
    status = fields.CharField(max_length=20, default='active')  # 'active', 'inactive', 'blocked'
    date_joined = fields.DatetimeField(auto_now_add=True)
    referral = fields.ForeignKeyField('models.User', related_name='referrals', null=True)
    balance = fields.DecimalField(max_digits=10, decimal_places=2, default=0.00)
    total_referrals = fields.IntField(default=0)
    is_admin = fields.BooleanField(default=False)

    class Meta:
        table = "users"

    def __str__(self):
        return f"User(id={self.user_id}, status={self.status})"


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: __init__.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\models\__init__.py



–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: list_generator.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\services\list_generator.py

from models.channel import Channel
from aiogram import Bot
from config import ADD_CHANNEL_LINK

async def send_daily_list(bot: Bot):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—Å—Ç–∞ –∫–∞–Ω–∞–ª–æ–≤ –≤ –∑–∞–¥–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã"""
    channels = await Channel.filter(status__in=['free', 'vip']).order_by('-subscribers_count')
    
    message_text = "-----------------------\n"
    message_text += "–ù–ê–ó–í–ê–ù–ò–ï –õ–ò–°–¢–ê üéØ\n"
    message_text += "-----------------------\n"

    for channel in channels:
        message_text += f"‚îè‚ñ∑ {channel.name} - {channel.subscribers_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
        message_text += f"‚î£ üîó {channel.link}\n"

    message_text += f"üì¢ –ú–ï–°–¢–û –î–õ–Ø –†–ï–ö–õ–ê–ú–ù–û–ì–û –ü–û–°–¢–ê üì¢\n"
    message_text += f"üîÑ –†–ê–ë–û–¢–ê ({ADD_CHANNEL_LINK})\n"
    # ... –æ—Å—Ç–∞–ª—å–Ω—ã–µ –±–ª–æ–∫–∏ —Ç–µ–∫—Å—Ç–∞

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—Å—Ç–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω—ã–µ –≥—Ä—É–ø–ø—ã (–ø—Ä–∏–º–µ—Ä)
    groups = await Channel.filter(status='group')  # –ü—Ä–∏–º–µ—Ä —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø
    for group in groups:
        await bot.send_message(chat_id=group.channel_id, text=message_text)


–ü–∞–ø–∫–∞: project\bot\utils

–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: payment.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\services\payment.py

from models.transaction import Transaction

async def process_payment(transaction_id: int) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞—Ç–µ–∂–∞ –ø–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
    transaction = await Transaction.get_or_none(id=transaction_id)
    if transaction and transaction.status == 'pending':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–∞—Ç–µ–∂–∞. –ù–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –ø–ª–∞—Ç–µ–∂
        transaction.status = 'confirmed'
        await transaction.save()
        return True
    return False


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: statistics.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\services\statistics.py

# statistics.py

from models.channel import Channel
from models.user import User

async def get_total_list_audience():
    channels = await Channel.filter(status__in=['free', 'vip'])
    total_audience = 0
    for channel in channels:
        total_audience += channel.subscribers_count
    return total_audience

async def get_total_bot_audience():
    total_users = await User.filter(status='active').count()
    return total_users

async def generate_list_preview(lang='ru'):
    # –õ–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–∏—Å—Ç–∞
    channels = await Channel.filter(status__in=['free', 'vip']).order_by('-subscribers_count')
    list_text = "–ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ª–∏—Å—Ç:\n\n"
    for channel in channels:
        list_text += f"üîó {channel.name} ({channel.link})\n"
    return list_text

from models.channel_statistic import ChannelStatistic
from models.channel import Channel
from datetime import date

async def update_statistics():
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–∞–Ω–∞–ª–æ–≤"""
    channels = await Channel.filter(status__in=['free', 'vip'])
    
    for channel in channels:
        # –ü—Ä–∏–º–µ—Ä –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ (–Ω—É–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å —Å API Telegram –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤)
        current_subscribers = channel.subscribers_count  # –ó–∞–≥–ª—É—à–∫–∞
        await ChannelStatistic.create(
            channel=channel,
            date=date.today(),
            subscribers_count=current_subscribers,
            joins_from_bot=0,  # –ó–∞–≥–ª—É—à–∫–∞
            joins_from_list=0  # –ó–∞–≥–ª—É—à–∫–∞
        )


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: __init__.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\services\__init__.py



–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: logging_config.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\utils\logging_config.py

import logging

def setup_logging(log_file: str = './project/logs/logging.txt'):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    logging.basicConfig(
        filename=log_file,
        filemode='a',
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        level=logging.INFO
    )


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: helpers.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\utils\helpers.py

import random
import string
from fpdf import FPDF
import hashlib
from datetime import datetime

def generate_password(length: int = 8) -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è"""
    chars = string.ascii_letters + string.digits
    return ''.join(random.choice(chars) for _ in range(length))



def generate_promo_code() -> str:
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ –ø—Ä–æ–º–æ-–∫–æ–¥–∞"""
    current_time = datetime.now().isoformat()
    return hashlib.sha1(current_time.encode()).hexdigest()[:10]



def create_pdf_report(data: dict, filename: str = 'report.pdf') -> str:
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Å—Ç–æ–≥–æ PDF –æ—Ç—á–µ—Ç–∞ –ø–æ –∫–∞–Ω–∞–ª–∞–º"""
    pdf = FPDF()
    pdf.add_page()

    pdf.set_font("Arial", size=12)
    pdf.cell(200, 10, txt="–û—Ç—á–µ—Ç –ø–æ –∫–∞–Ω–∞–ª–∞–º", ln=True, align="C")

    for key, value in data.items():
        pdf.cell(200, 10, txt=f"{key}: {value}", ln=True)

    filepath = f"./project/reports/{filename}"
    pdf.output(filepath)
    return filepath


–ü–∞–ø–∫–∞: project\logs

–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: scheduler.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\utils\scheduler.py

# scheduler.py

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from services.list_generator import send_daily_list
from services.statistics import update_statistics

scheduler = AsyncIOScheduler()

def setup_scheduler():
    scheduler.add_job(send_daily_list, 'cron', hour=10, timezone='Europe/Moscow')
    scheduler.add_job(update_statistics, 'interval', hours=1)
    scheduler.start()


–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: __init__.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\utils\__init__.py



–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: __init__.py
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\bot\__init__.py



–ù–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞: README.md
–†–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏–µ —Ñ–∞–π–ª–∞: ./project\README.md



